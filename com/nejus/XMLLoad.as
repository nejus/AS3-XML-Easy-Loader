package  cl.nu {		import flash.net.URLRequest;		import flash.net.URLLoader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.events.ProgressEvent;		import flash.net.URLVariables;	import flash.net.URLRequestMethod;	import flash.net.URLLoaderDataFormat;	import flash.net.URLLoader;	import flash.net.sendToURL;				public class XMLLoad {				public var ready:Boolean;		private var urlload:URLLoader;		public var data:XML;		public var bytesLoaded:Number;		public var bytesTotal:Number;		private var options:Object;		private var vars:URLVariables;		private var r:URLRequest;				public function XMLLoad(_url:String, _options:Object = null) {			options = (_options == null ? new Object() : _options );			ready = false;						data = new XML();			data.ignoreWhitespace = true;						vars = new URLVariables();			if(options.vars != null){				for(var i:String in options.vars) { vars[i] = options.vars[i].toString(); }			}						urlload = new URLLoader();			urlload.dataFormat = URLLoaderDataFormat.TEXT;			urlload.addEventListener(ProgressEvent.PROGRESS, onProgress);			urlload.addEventListener(Event.COMPLETE, onComplete);			urlload.addEventListener(IOErrorEvent.IO_ERROR, ioErrorListener);			urlload.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityErrorEvent);			r = new URLRequest();			r.url = _url;			r.method = URLRequestMethod.POST;			r.data = vars;			urlload.load(r);										}		private function onProgress(e:ProgressEvent) {			bytesTotal = e.target.bytesTotal;			bytesLoaded = e.target.bytesLoaded;			if(options.onProgress != null) options.onProgress(e);		}		private function onComplete(e:Event):void {						if(options.debug != null){				trace("-- DEBUG --");				trace("-- URL: ", r.url);				trace("-- DATA: ", e.target.data);			}						bytesTotal = bytesLoaded;			data = XML(e.target.data);			if(options.onComplete != null) options.onComplete(data);			ready = true;		}		private function ioErrorListener(e:IOErrorEvent){			//trace("IOERROR : ", e);		}				private function onSecurityErrorEvent(e:SecurityErrorEvent){			//trace("SECURITY_ERROR : ", e);		}							}	}